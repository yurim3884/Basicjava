package chapter06;

public class Class {
	public static void main(String[] args) {
		
	}
/*
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * -객체를 만들어 내기 위한
 * 설계도 또는 틀 -객체의 상태를 나타내는 필드(field)와 객체의 행동을 나타내는 메소드(method)로 구성
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 객체(object) :
 * 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성을 가지고 있으면서 식별 가능한 것
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 필드(field): 클래스에
 * 포함된 변수(variable)
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 메소드(method): 어떠한
 * 특정 작업을 수행하기 위한 명령문의 집합
  ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 어렵지만 많이 사용한다
 * 이해하기 어렵다면 외워라
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 데이터를 저장하는 필드,
 * 동작하는 메소드(함수) = 클래스 =>데이터와 동작
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 프로그래밍을 할 때 알아야 할 것 
 * 변수(데이터) *연산자 *제어문 *메소드 변수와 메소드의 결합 = 객체 객체의 확장 = 인터페이스
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 집합관계 (부품(타이어 엔진)) -- (자동차) 
 * 사용관계 (사람) -- (자동차) 
 * 상속관계 (기계(부모)) -- (자동차(자식))
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 무엇을 만들기 위한 정보
 * 개발자 -설계-> 클래스(설계도) -인스턴스화-> 객체
  ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 클래스에서 변수가 아니고 필드
 * nextLine 등 메소드
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 클래스로부터 인해 만들어진
 * 객체를 인스턴스라고 한다 heap에서 사용하는 객체 ..? 객체가 인스턴스보다 메모리가 크다
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 클래스를 통해
 * ***여러개***를 만들면 객체다..?
 * 
 * 설계도대로 힙 영역에 원하는 만큼 찍어낼수있다
 * 
 * 글래스를 인스턴스로 변환 -> 인스턴스화
 * 
  ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 클래스 선언
 * 
 * 파일명이랑 클래스 이름이랑 동일 해야한다 파일명이 Class 일때 public class Class 한 파일에서 클래스를 2번 지정할 때
 * class Class
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * - 하나이상의 문자 
 * - 숫자로 시작 불가 
 * - 대소문자 구분 첫글자는 대문자 
 * - $,_ 외에는 사용 불가 
 * - 자바 키워드 사용 불가
 * ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 변수 명을 지정할 때
 * camalCase사용 클래스 명을 지정할 땐 Pascalcase사용 상수명을 지정할 때 underscore -> snake case 다
 * 대문자로 v_numder, f_go(): 헝가리안 표기법 클래스명을 지정할 때 언더바를 사용하지말자
  ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 메소드 선언 호출 클래스 선언
 * 초기화
 ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 클래스 멤버 필드(데이터
 * 저장) 메소드(동작) 생성자(데이터 초기화) int a;- 필드
 * 
 * Person person = new Person(); --Person(); 생성자
 * ----------------------------------------------------------------------------------------------------------------------------------------- 
 * 메소드 안 변수 // 클래스
 * 안 필드 변수와 형태가 유사 -> 변수는 아님
 *  ----------------------------------------------------------------------------------------------------------------------------------------- 
 *  필내 외부에서 접근할 때에는 객체를 생성하고 사용할 수 있다
 *  - 객체를 생성하고 참조 변수를 활용
 *  ----------------------------------------------------------------------------------------------------------------------------------------- 
 *  필드는 메소드를 활용할 수 있다.
 *  필드는 클래스 블록어디서든 선언할 수 있다. (생성자 , 메소드 내부 제외)
 *  필든느 초기값을 주지않더라도 기본값으로 자동 초기화된다.
 *   ----------------------------------------------------------------------------------------------------------------------------------------- 
 *   
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */		
	}


